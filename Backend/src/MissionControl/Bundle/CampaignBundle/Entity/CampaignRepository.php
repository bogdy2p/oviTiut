<?php

namespace MissionControl\Bundle\CampaignBundle\Entity;

use Doctrine\ORM\EntityRepository;
use MissionControl\Bundle\CampaignBundle\Entity\Teammember;

/**
 * CampaignRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CampaignRepository extends EntityRepository {

    public function findAllDisabled() {

        $em = $this->getEntityManager();
        $connection = $em->getConnection();
        $statement = $connection->prepare(
                "SELECT `id` FROM `campaign` WHERE `not_visible`= true
                  
                ");
        $statement->execute();
        $all_disabled_campaigns_ids = $statement->fetchAll();
        return $all_disabled_campaigns_ids;
    }

    public function findAllVisible() {

        $em = $this->getEntityManager();
        $connection = $em->getConnection();
        $statement = $connection->prepare(
                "SELECT `id` FROM `campaign` WHERE `not_visible`= false
                  
                ");
        $statement->execute();
        $all_visible_campaigns_ids = $statement->fetchAll();
        return $all_visible_campaigns_ids;
    }
    
    public function findAllVisibleCampaignsForAViewer() {

        $em = $this->getEntityManager();
        $connection = $em->getConnection();
        
        $temp_client_query = $connection->prepare("SELECT `id` from `client` WHERE `name` = 'all_clients'");
        $temp_client_query->execute();
        $temp_client_id = $temp_client_query->fetchColumn();
        $temp_country_query = $connection->prepare("SELECT `id` from `country` WHERE `name` = 'temp_country'");
        $temp_country_query->execute();
        $temp_country_id = $temp_country_query->fetchColumn();
        $temp_client = $em->getRepository('CampaignBundle:Client')->find($temp_client_id);
        $temp_country = $em->getRepository('CampaignBundle:Country')->find($temp_country_id);

        $queryBuilder = $em->createQueryBuilder();
        $queryBuilder->select('c')
                ->from('CampaignBundle:Campaign', 'c')
                ->where('c.not_visible = ?1')
                ->andWhere('c.client != ?2')
                ->andWhere('c.country != ?3')
                ->orderBy('c.id', 'ASC')
                ->setParameter(1, false)
                ->setParameter(2, $temp_client)
                ->setParameter(3, $temp_country);
        
        $query = $queryBuilder->getQuery();
        $results = $query->getResult();
        //\Doctrine\Common\Util\Debug::dump($results);
        $all_visible_campaigns_ids = array();
        foreach ($results as $result){
            $all_visible_campaigns_ids[] = $result->getId();
        }
        return $all_visible_campaigns_ids;
        
    }

    
    
    
    public function findAllVisibleCampaignsRelatedToUser($userId) {
        $em = $this->getEntityManager();

        $connection = $em->getConnection();

        $statement = $connection->prepare(
                "SELECT `campaign` FROM `campaign_teammembers` WHERE `member`=:user
                  UNION
                 SELECT `id` FROM `campaign` WHERE `user_id`=:user
                ");
        $statement->bindValue('user', $userId);
        $statement->execute();

        $all_campaigns_ids = $statement->fetchAll();


        $all_visible_campaign_ids = array();
        foreach ($all_campaigns_ids as $campaign_id) {
            $visible_campaigns = $this->getEntityManager()->getRepository('CampaignBundle:Campaign')->findBy(['id' => $campaign_id, 'not_visible' => false]);
            if ($visible_campaigns) {
                foreach ($visible_campaigns as $visible_campaign) {
                    $all_visible_campaign_ids[] = $visible_campaign->getId();
                }
            }
        }
        // print_r($all_visible_campaign_ids);
        return $all_visible_campaign_ids;
    }

    public function findAllCampaignsRelatedToUser($userId) {
        $em = $this->getEntityManager();

        $connection = $em->getConnection();

        $statement = $connection->prepare(
                "SELECT `campaign` FROM `campaign_teammembers` WHERE `member`=:user
                  UNION
                 SELECT `id` FROM `campaign` WHERE `user_id`=:user
                ");
        $statement->bindValue('user', $userId);
        $statement->execute();

        $all_campaigns_ids = $statement->fetchAll();



        return $all_campaigns_ids;
    }

//    public function findAllCampaignsRelatedToUserWithoutLimit($userId) {
//        $em = $this->getEntityManager();
//
//        $connection = $em->getConnection();
//
//        $statement = $connection->prepare(
//                "SELECT `campaign` FROM `campaign_teammembers` WHERE `member`=:user
//                  UNION
//                 SELECT `id` FROM `campaign` WHERE `user_id`=:user
//                ");
//        $statement->bindValue('user', $userId);
//        $statement->execute();
//
//        $all_campaigns_ids = $statement->fetchAll();
//        return $all_campaigns_ids;
//    }
//
//    public function findAllVisibleCampaignsRelatedToUserWithoutLimit($userId) {
//        $em = $this->getEntityManager();
//
//        $connection = $em->getConnection();
//
//        $statement = $connection->prepare(
//                "SELECT `campaign` FROM `campaign_teammembers` WHERE `member`=:user
//                  UNION
//                 SELECT `id` FROM `campaign` WHERE `user_id`=:user
//                ");
//        $statement->bindValue('user', $userId);
//        $statement->execute();
//
//        $all_campaigns_ids = $statement->fetchAll();
//        //print_r($all_campaigns_ids);
//
//        $all_visible_campaign_ids = array();
//        foreach ($all_campaigns_ids as $campaign_id) {
//            $visible_campaigns = $this->getEntityManager()->getRepository('CampaignBundle:Campaign')->findBy(['id' => $campaign_id, 'not_visible' => false]);
//            if ($visible_campaigns) {
//                foreach ($visible_campaigns as $visible_campaign) {
//                    $all_visible_campaign_ids[] = $visible_campaign->getId();
//                }
//            }
//        }
//        return $all_visible_campaign_ids;
//    }
}
