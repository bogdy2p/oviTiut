<?php

namespace MissionControl\Bundle\FileBundle\Entity;

use Doctrine\ORM\EntityRepository;
use MissionControl\Bundle\CampaignBundle\Entity\Campaign;
use MissionControl\Bundle\FileBundle\Entity\File;
use MissionControl\Bundle\TaskBundle\Entity\Task;

/**
 * FileRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FileRepository extends EntityRepository {

	/*
	 * Method retrieves all available original file names.
	 *
	 * * @return array of objects
	 */
	public function getAllOriginalNames(Campaign $campaign) {

		$originalNamesQuery = $this->getEntityManager()->createQuery(
			'SELECT f
			FROM FileBundle:File f
			WHERE f.campaign = :campaign
			GROUP BY f.task, f.fileType, f.originalName')
			->setParameter('campaign', $campaign);

		$originalNames = $originalNamesQuery->getResult();

		return $originalNames;

	} // End of get all original names method().



	/*
	 * Method retrieves all original names of the files assigned to a task.
	 *
	 * @return array of objects
	 */
	public function getAllTaskOriginalNames(Campaign $campaign, Task $task) {

		$originalTaskFileNamesQuery = $this->getEntityManager()->createQuery(
			'SELECT f
			FROM FileBundle:File f
			WHERE f.campaign = :campaign AND f.task = :task
			GROUP BY f.task, f.fileType, f.originalName')
			->setParameter('campaign', $campaign)
			->setParameter('task', $task);

		$originalTaskFileNames = $originalTaskFileNamesQuery->getResult();

		return $originalTaskFileNames;

	} // End of get all original names of files assigned to a task.



	/*
	 * Method retrieves latest version of a file belonging to a campaign and an original name.
	 */
	public function getLatestFileVersion(Campaign $campaign, File $originalName) {

		$fileRepository = $this->getEntityManager();

		$versionQuery = $fileRepository->createQuery(
			'SELECT f
			FROM FileBundle:File f
			WHERE f.campaign = :campaign 
                AND f.originalName = :originalName
                AND f.task = :task
                AND f.fileType = :fileType
                AND f.contentType = :contentType
                AND f.version IS NOT NULL
                AND f.notVisible != TRUE
            ORDER BY f.version DESC')
			->setMaxResults(1)
			->setParameter('campaign', $campaign)
            ->setParameter('originalName', $originalName->getOriginalName())
            ->setParameter('task', $originalName->getTask())
            ->setParameter('fileType', $originalName->getFileType())
            ->setParameter('contentType', $originalName->getContentType());

        $latestVersion = $versionQuery->getOneOrNullResult();

		return $latestVersion;

	} // End of get latest file version method().

}